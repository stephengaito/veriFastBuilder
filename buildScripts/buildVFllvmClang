#!/bin/bash

# This bash script automates the build of the vf-llvm-clang-build tool

LLVM_VERSION="13.0.0"

TOOL_VERSION="aafd059"

JOBS_LIMIT=$(nproc)

# On a small raspberry using all of the cores over heats the CPU when
# compiling the large code base of llvm... so if we limit the number of
# jobs to one or two cores, while we compile slower overall, we keep a
# stable machine which *can* compile the code base...
#
ARM_JOBS_LIMIT=1

COMMON_CMAKE_VARS="-DLLVM_ENABLE_PROJECTS=clang -DLLVM_BUILD_TOOLS=OFF -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLVM_BUILD_LLVM_DYLIB=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_FFI=OFF -DLLVM_ENABLE_ZLIB=OFF DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF"

#PACKAGE_NAME=vf-llvm-clang-build-$TOOL_VERSION

# enforce any jobs limits
#
case $(uname -m) in
  aarch64)
    JOBS_LIMIT=$ARM_JOBS_LIMIT
    ;;
esac

JOBS_LIMIT=1

apt install ninja-build cmake

mkdir -p vf-llvm-clang-build
cd vf-llvm-clang-build

if [[ ! -d llvm-project ]] ; then
  git clone --depth 1 --branch llvmorg-${LLVM_VERSION} https://github.com/llvm/llvm-project
fi

mkdir -p $PACKAGE_NAME

if [[ ! -d build ]] ; then
  mkdir build
  cd build
  mkdir -p Release
  cmake -G Ninja ${COMMON_CMAKE_VARS} -DCMAKE_INSTALL_PREFIX=/usr/local ../llvm-project/llvm
else
  cd build
fi

cmake --build . --target install --config Release -j $JOBS_LIMIT

#cd ..
#tar -cvzf ${PACKAGE_NAME}-linux.tar.gz ${PACKAGE_NAME}
#shasum -a 256 ${PACKAGE_NAME}-linux.tar.gz
